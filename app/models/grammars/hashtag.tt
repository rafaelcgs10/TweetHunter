grammar Exp
  rule expression
    s d:disjunction s
    { def value; d.value; end }
  end

  rule disjunction
    conjunction tail:(or s conjunction s)*
    { def value
        tail.elements.inject(conjunction.value) do |left, last|
          '(' + left +'|' + last.conjunction.value + ')'
        end
      end
    }
  end
 
  rule conjunction
    p:primitive tail:(and s primitive s)*
    { def value
        if tail.empty?
	  p.value
	else
          tail.elements.inject("(?=.*" + p.value + ")") do |e, l|
            e + "(?=.*" + l.primitive.value + ")"
          end
        end
      end
    }
  end

  rule primitive
    '(' expression ')' s { def value; '(' + expression.value + ')'; end }
    /
    tag s { def value; tag.value; end }
  end
  
  rule and
    'AND' !tag s 
  end

  rule or
    'OR' !tag s
  end

  rule tag
    '#' t:([[:alnum:]_]+) s { def value; '\B#' + t.text_value + '\b'; end }
  end

  # Optional space
  rule s
    S?
  end

  # Mandatory space
  rule S 
    [ \t\n\r]*
  end
end